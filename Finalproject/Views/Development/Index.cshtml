@model PaginatedList<Finalproject.Models.ProjectTask>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

@using (Html.BeginForm("Index", "Development", FormMethod.Get))
{
    <p>
        Find by Name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string) 
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                <a asp-action="Index" asp-route-orderString="PercentageCompleted">PercentageCompleted</a> 
            </th>
            <th>
                <a asp-action="Index" asp-route-orderString="IsCompleted">IsCompleted</a> 
            </th>
            <th>
                <a asp-action="Index" asp-route-orderString="Priority">Priority</a>
            </th>
            <th>
                StartDate
            </th>
            <th>
                EndDate
            </th>
            <th>
                DeadLine
            </th>
            <th>
                Project
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <progress style="width:130px;" max="100" value="@item.PercentageCompleted"></progress>
                <span id="show">@item.PercentageCompleted</span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsCompleted)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Priority)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DeadLine)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Project.Title)
            </td>
            <td>
                <a asp-action="UpdateTask" asp-route-taskId="@item.Id">UpdateTask</a> |
                <a asp-action="TaskDetails" asp-route-taskId="@item.Id">Details</a> |
                    @if (item.IsCompleted == true)
                    {
                        <a asp-action="AddComments" asp-route-taskId="@item.Id">Add Comments</a>
                    }
                
            </td>
        </tr>
}
    </tbody>
</table>

@*The properties HasPreviousPage and HasNextPage can be used to enable or disable Previous and Next paging buttons*@
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

@*Show current page index and total pages*@
Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages

@*Go to previous page: pageIndex -1, and pass the pageNumber to Action Index*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Previous
</a>
@*Go to next page: pageIndex +1*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Next
</a>