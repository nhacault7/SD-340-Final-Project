@model PaginatedList<Finalproject.Models.Project>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
    <a asp-action="OverdueTasks">Overdue Tasks</a>
    <a asp-controller="Notifications">Notifications (@ViewData["Count"])</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Title
            </th>
            <th>
                Description
            </th>
            <th>
                PercentageCompleted
            </th>
            <th>
                IsCompleted
            </th>
            <th>
                Budget
            </th>
            <th>
                TotalCost
            </th>
            <th>
                Priority
            </th>
            <th>
                StartDate
            </th>
            <th>
                EndDate
            </th>
            <th>
                Deadline
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
               @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PercentageCompleted)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsCompleted)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Budget)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalCost)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Priority)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Deadline)
            </td>
            <td>
                <a asp-action="Edit" asp-route-projectId="@item.Id">Edit</a> |
                <a asp-action="ProjectDetails" asp-route-projectId="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-projectId="@item.Id">Delete</a>
            </td>
        </tr>

}
    </tbody>
</table>
@*The properties HasPreviousPage and HasNextPage can be used to enable or disable Previous and Next paging buttons*@
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

@*Show current page index and total pages*@
Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages

@*Go to previous page: pageIndex -1, and pass the pageNumber to Action Index*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Previous
</a>
@*Go to next page: pageIndex +1*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Next
</a>
